Ddoc

$(SPEC_S Template Mixins,

        A $(I TemplateMixin) takes an arbitrary set of declarations from
        the body of a $(I TemplateDeclaration) and inserts them
        into the current context.

$(GRAMMAR
$(GNAME TemplateMixinDeclaration):
    $(D mixin) $(D template) $(I Identifier) $(TEMPLATEPARAMETERS) $(GLINK2 template, Constraint)$(OPT) $(D {) $(GLINK2 module, DeclDefs)$(OPT) $(D })

$(GNAME TemplateMixin):
    $(D mixin) $(GLINK MixinTemplateName) $(TEMPLATEARGUMENTS)$(OPT) $(I Identifier)$(OPT) $(D ;)

$(GNAME MixinTemplateName):
    $(D .) $(GLINK QualifiedIdentifierList)
    $(GLINK QualifiedIdentifierList)
    $(GLINK2 declaration, Typeof) $(D .) $(GLINK QualifiedIdentifierList)

$(GNAME QualifiedIdentifierList):
    $(I Identifier)
    $(I Identifier) $(D .) $(I QualifiedIdentifierList)
    $(GLINK2 template, TemplateInstance) $(D .) $(I QualifiedIdentifierList)
)

        $(P A $(I TemplateMixin) can occur in declaration lists of modules,
        classes, structs, unions, and as a statement.
        The $(I MixinTemplateName) refers to a $(I TemplateDeclaration).
        If the $(I TemplateDeclaration) has no parameters, the mixin
        form that has no !($(I TemplateArgumentList))
        can be used.
        )

        $(P Unlike a template instantiation, a template mixin's body is evaluated
        within the scope where the mixin appears, not where the template declaration
        is defined. It is analogous to cutting and pasting the body of
        the template into the location of the mixin into a $(LINK2 #mixin_scope, nested scope). It is useful for injecting
        parameterized $(SINGLEQUOTE boilerplate) code, as well as for creating
        templated nested functions, which is not possible with
        template instantiations.
        )

$(RUNNABLE_EXAMPLE
------
mixin template Foo()
{
    int x = 5;
}

$(CODE_HIGHLIGHT mixin Foo;)

struct Bar
{
    $(CODE_HIGHLIGHT mixin Foo;)
}

void main()
{
    writefln("x = %d", x);         // prints 5
    {
        Bar b;
        int x = 3;

        writefln("b.x = %d", b.x); // prints 5
        writefln("x = %d", x);     // prints 3
        {
            $(CODE_HIGHLIGHT mixin Foo;)
            writefln("x = %d", x); // prints 5
            x = 4;
            writefln("x = %d", x); // prints 4
        }
        writefln("x = %d", x);     // prints 3
    }
    writefln("x = %d", x);         // prints 5
}
------
)

        Mixins can be parameterized:

------
mixin template Foo(T)
{
    T x = 5;
}

$(CODE_HIGHLIGHT mixin Foo!(int);)           // create x of type int
------

        Mixins can add virtual functions to a class:

$(RUNNABLE_EXAMPLE
------
mixin template Foo()
{
    void func() { writeln("Foo.func()"); }
}

class Bar
{
    $(CODE_HIGHLIGHT mixin Foo;)
}

class Code : Bar
{
    override void func() { writeln("Code.func()"); }
}

void main()
{
    Bar b = new Bar();
    b.func();      // calls Foo.func()

    b = new Code();
    b.func();      // calls Code.func()
}
------
)

        Mixins are evaluated in the scope of where they appear, not the scope
        of the template declaration:

$(RUNNABLE_EXAMPLE
------
int y = 3;

mixin template Foo()
{
    int abc() { return y; }
}

void main()
{
    int y = 8;
    $(CODE_HIGHLIGHT mixin Foo;) // local y is picked up, not global y
    assert(abc() == 8);
}
------
)

        Mixins can parameterize symbols using alias parameters:

$(RUNNABLE_EXAMPLE
------
mixin template Foo(alias b)
{
    int abc() { return b; }
}

void main()
{
    int y = 8;
    $(CODE_HIGHLIGHT mixin Foo!(y);)
    assert(abc() == 8);
}
------
)

        This example uses a mixin to implement a generic Duff's device
        for an arbitrary statement (in this case, the arbitrary statement
        is in bold). A nested function is generated as well as a
        delegate literal, these can be inlined by the compiler:

$(RUNNABLE_EXAMPLE
------
import std.stdio : writeln;

mixin template duffs_device(alias id1, alias id2, alias s)
{
    void duff_loop()
    {
        if (id1 < id2)
        {
            typeof(id1) n = (id2 - id1 + 7) / 8;
            switch ((id2 - id1) % 8)
            {
                case 0: do { s(); goto case;
                case 7:      s(); goto case;
                case 6:      s(); goto case;
                case 5:      s(); goto case;
                case 4:      s(); goto case;
                case 3:      s(); goto case;
                case 2:      s(); goto case;
                case 1:      s(); continue;
                default:     assert(0, "Impossible");
                        } while (--n > 0);
            }
        }
    }
}

void foo() { writeln("foo"); }

void main()
{
    int i = 1;
    int j = 11;

    mixin duffs_device!(i, j, $(CODE_HIGHLIGHT delegate { foo(); }));
    duff_loop();  // executes foo() 10 times
}
------
)

$(H2 $(LNAME2 mixin_scope, Mixin Scope))

        The declarations in a mixin are placed in a nested scope and then
	$(SINGLEQUOTE imported) into the surrounding
        scope. If the name of a declaration in a mixin is the same
        as a declaration in the surrounding scope, the surrounding declaration
        overrides the mixin one:

$(RUNNABLE_EXAMPLE
------
import std.stdio;

int x = 3;

mixin template Foo()
{
    int x = 5;
    int y = 5;
}

$(CODE_HIGHLIGHT mixin Foo;)
int y = 3;

void main()
{
    writefln("x = %d", x);  // prints 3
    writefln("y = %d", y);  // prints 3
}
------
)

        If two different mixins are put in the same scope, and each
        define a declaration with the same name, there is an ambiguity
        error when the declaration is referenced:

$(RUNNABLE_EXAMPLE
------
mixin template Foo()
{
    int x = 5;
    void func(int x) { }
}

mixin template Bar()
{
    int x = 4;
    void func(long x) { }
}

$(CODE_HIGHLIGHT mixin Foo;)
$(CODE_HIGHLIGHT mixin Bar;)

void test()
{
    import std.stdio : writefln;
    writefln("x = %d", x); // error, x is ambiguous
    func(1);               // error, func is ambiguous
}
------
)
        $(P The call to $(D func()) is ambiguous because
        Foo.func and Bar.func are in different scopes.
        )

        $(P If a mixin has an $(I Identifier), it can be used to
        disambiguate between conflicting symbols:
        )
$(RUNNABLE_EXAMPLE
------
import std.stdio;

int x = 6;

mixin template Foo()
{
    int x = 5;
    int y = 7;
    void func() { }
}

mixin template Bar()
{
    int x = 4;
    void func() { }
}

$(CODE_HIGHLIGHT mixin Foo F;)
$(CODE_HIGHLIGHT mixin Bar B;)

void test()
{
    writefln("y = %d", y);     // prints 7
    writefln("x = %d", x);     // prints 6
    writefln("F.x = %d", F.x); // prints 5
    writefln("B.x = %d", B.x); // prints 4
    F.func();                  // calls Foo.func
    B.func();                  // calls Bar.func
}
------
)
        $(P Alias declarations can be used to overload together
        functions declared in different mixins:)

$(RUNNABLE_EXAMPLE
-----
mixin template Foo()
{
    void func(int x) {  }
}

mixin template Bar()
{
    void func(long x) {  }
}

mixin Foo!() F;
mixin Bar!() B;

$(CODE_HIGHLIGHT alias func = F.func;)
$(CODE_HIGHLIGHT alias func = B.func;)

void main()
{
    func(1);  // calls B.func
    func(1L); // calls F.func
}
-----
)


        $(P A mixin has its own scope, even if a declaration is overridden
        by the enclosing one:)

$(RUNNABLE_EXAMPLE
------
int x = 4;

mixin template Foo()
{
    int x = 5;
    int bar() { return x; }
}

$(CODE_HIGHLIGHT mixin Foo;)

void main()
{
    writefln("x = %d", x);         // prints 4
    writefln("bar() = %d", bar()); // prints 5
}
------
)

$(SPEC_SUBNAV_PREV_NEXT template, Templates, contracts, Contract Programming)
)

Macros:
        TITLE=Template Mixins
        TEMPLATEPARAMETERS=$(GLINK2 template, TemplateParameters)
        TEMPLATEARGUMENTS=$(GLINK2 template, TemplateArguments)
        _=
