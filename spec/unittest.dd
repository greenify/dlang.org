Ddoc

$(SPEC_S Unit Tests,

$(GRAMMAR
$(GNAME UnitTest):
    $(D unittest) $(GLINK2 statement, BlockStatement)
)

	$(P Unit tests are a series of test cases applied to a module to determine
	if it is working properly. Ideally, unit tests should be run every
	time a program is compiled.
	)

	$(P Unit tests are a special function defined like:)

------
unittest
{
    ...test code...
}
------

    $(P There can be any number of unit test functions in a module,
    including within struct, union and class declarations.
    They are executed in lexical order.
    The order in which the modules are called to run their unit tests is
    implementation defined.
    Stylistically, a unit test for a function should appear immediately
    following it.
    )

    $(P A compiler switch, such as $(DDSUBLINK dmd, switch-unittest, $(B -unittest))
    for $(B dmd), will
    cause the unittest test code to be compiled and incorporated into
    the resulting executable. The unittest code gets run after
    static initialization is run and before the $(D main())
    function is called.
    )

    $(P $(GLINK UnitTest)s must be grammatically correct even if $(B -unittest) is not
    used.)

    $(P For example, given a class $(D Sum) that is used to add two values, a unit
    test can be given:)

$(RUNNABLE_EXAMPLE
$(RUNNABLE_EXAMPLE_ARGS -main -unittest)
------
class Sum
{
    int add(int x, int y) { return x + y; }

    unittest
    {
        Sum sum = new Sum;
        assert(sum.add(3,4) == 7);
        assert(sum.add(-2,0) == -2);
    }
}
------
)

$(H4 $(LNAME2 attributes_unittest, Attributed Unittests))

$(P A unittest may be attributed with any of the global function attributes.
Such unittests are useful in verifying the given attribute(s) on a template
function:)

$(RUNNABLE_EXAMPLE
$(RUNNABLE_EXAMPLE_ARGS -main -unittest)
------
void myFunc(T)(T[] data)
{
    if (data.length > 2)
        data[0] = data[1];
}

@safe nothrow unittest
{
    auto arr = [1,2,3];
    myFunc(arr);
    assert(arr == [2,2,3]);
}
------
)

$(P This unittest verifies that $(D myFunc) contains only $(D @safe), $(D
nothrow) code. Although this can also be accomplished by attaching these
attributes to $(D myFunc) itself, that would prevent $(D myFunc) from being
instantiated with types $(D T) that have $(D @system) or throwing code in their
$(D opAssign) method, or other methods that $(D myFunc) may call. The above
idiom allows $(D myFunc) to be instantiated with such types, yet at the same
time verify that the $(D @system) and throwing behaviour is not introduced by
the code within $(D myFunc) itself.)

$(H4 $(LNAME2 documented-unittests, Documented Unittests))

$(P Documented unittests allow the developer to deliver code examples to the user,
    while at the same time automatically verifying that the examples are valid. This
    avoids the frequent problem of having outdated documentation for some piece of code.)

$(P If a declaration is followed by a documented unittest, the code in
    the unittest will be inserted in the $(B example) section of the declaration:)

$(RUNNABLE_EXAMPLE
$(RUNNABLE_EXAMPLE_ARGS -main -unittest)
------
/// Math class
class Math
{
    /// add function
    static int add(int x, int y) { return x + y; }

    ///
    unittest
    {
        assert(add(2, 2) == 4);
    }
}

///
unittest
{
    auto math = new Math();
    auto result = math.add(2, 2);
}
------
)

$(P The above will generate the following documentation:)

<dl><dt><big><a name="Math"></a>class <u>Math</u>;

</big></dt>
<dd><u>Math</u> class<br><br>
<b>Example:</b><pre class="d$(UNDERSCORE)code"><font color="blue">auto</font> math = <font color="blue">new</font> <u>Math</u>;
<font color="blue">auto</font> result = math.add(2, 2);
</pre><br>

<dl><dt><big><a name="Math.add"></a>int <u>add</u>(int <i>x</i>, int <i>y</i>);
</big></dt>
<dd><u>add</u> function<br><br>
<b>Example:</b><pre class="d$(UNDERSCORE)code"><font color="blue">assert</font>(<u>add</u>(2, 2) == 4);
</pre>
</dd>
</dl>
</dd>
</dl>

$(P A unittest which is not documented, or is marked as private will not be
    used to generate code samples.)

$(P There can be multiple documented unittests and they can appear
    in any order. They will be attached to the last non-unittest declaration:)

$(RUNNABLE_EXAMPLE
$(RUNNABLE_EXAMPLE_ARGS -main -unittest)
------
/// add function
int add(int x, int y) { return x + y; }

/// code sample generated
unittest
{
    assert(add(1, 1) == 2);
}

/// code sample not generated because the unittest is private
private unittest
{
    assert(add(2, 2) == 4);
}

unittest
{
    /// code sample not generated because the unittest isn't documented
    assert(add(3, 3) == 6);
}

/// code sample generated, even if it only includes comments (or is empty)
unittest
{
    /** assert(add(4, 4) == 8); */
}
------
)

$(P The above will generate the following documentation:)

<dl><dt><big><a name="add"></a>int <u>add</u>(int <i>x</i>, int <i>y</i>);

</big></dt>
<dd><u>add</u> function<br><br>
<b>Examples:</b><br>
code sample generated
<pre class="d$(UNDERSCORE)code">
<font color="blue">assert</font>(<u>add</u>(1, 1) == 2);
</pre>
<br><br><b>Examples:</b><br>
code sample generated, even if it is empty or only includes comments

<pre class="d$(UNDERSCORE)code">
<font color="green">/** assert(add(4, 4) == 8); */</font>
</pre>
<br><br>
</dd>
</dl>


$(H3 $(LNAME2 versioning, Versioning))

	$(P The $(DDSUBLINK spec/version, PredefinedVersions, version identifier)
	$(D unittest) is predefined if the compilation
	is done with unit tests enabled.
	)

$(SPEC_SUBNAV_PREV_NEXT errors, Error Handling, garbage, Garbage Collection)
)

Macros:
	TITLE=Unit Tests
	_=

